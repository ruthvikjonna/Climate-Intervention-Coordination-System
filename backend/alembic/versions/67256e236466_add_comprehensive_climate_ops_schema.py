"""add_comprehensive_climate_ops_schema

Revision ID: 67256e236466
Revises: 1e364b1fcb58
Create Date: 2025-06-27 23:26:03.186028

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '67256e236466'
down_revision: Union[str, Sequence[str], None] = '1e364b1fcb58'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('data_sources',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_type', sa.String(length=50), nullable=False),
    sa.Column('provider', sa.String(length=100), nullable=True),
    sa.Column('url', sa.String(length=500), nullable=True),
    sa.Column('api_endpoint', sa.String(length=500), nullable=True),
    sa.Column('data_format', sa.String(length=50), nullable=True),
    sa.Column('update_frequency', sa.String(length=50), nullable=True),
    sa.Column('spatial_resolution', sa.Float(), nullable=True),
    sa.Column('temporal_resolution', sa.String(length=50), nullable=True),
    sa.Column('geographic_coverage', sa.JSON(), nullable=True),
    sa.Column('temporal_coverage', sa.JSON(), nullable=True),
    sa.Column('data_quality_score', sa.Float(), nullable=True),
    sa.Column('reliability_score', sa.Float(), nullable=True),
    sa.Column('accuracy_metrics', sa.JSON(), nullable=True),
    sa.Column('requires_authentication', sa.Boolean(), nullable=True),
    sa.Column('authentication_method', sa.String(length=50), nullable=True),
    sa.Column('rate_limits', sa.JSON(), nullable=True),
    sa.Column('cost_per_request', sa.Float(), nullable=True),
    sa.Column('cost_per_month', sa.Float(), nullable=True),
    sa.Column('licensing_terms', sa.Text(), nullable=True),
    sa.Column('api_version', sa.String(length=20), nullable=True),
    sa.Column('supported_parameters', sa.JSON(), nullable=True),
    sa.Column('data_schema', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_successful_fetch', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('headers', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('idx_data_sources_active', 'data_sources', ['is_active'], unique=False)
    op.create_index('idx_data_sources_provider', 'data_sources', ['provider'], unique=False)
    op.create_index('idx_data_sources_type', 'data_sources', ['source_type'], unique=False)
    op.create_table('optimization_results',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('operator_id', sa.UUID(), nullable=False),
    sa.Column('grid_cell_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('optimization_type', sa.String(length=50), nullable=False),
    sa.Column('algorithm', sa.String(length=100), nullable=False),
    sa.Column('objective_function', sa.Text(), nullable=True),
    sa.Column('input_constraints', sa.JSON(), nullable=True),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('parameter_bounds', sa.JSON(), nullable=True),
    sa.Column('optimal_parameters', sa.JSON(), nullable=False),
    sa.Column('objective_value', sa.Float(), nullable=True),
    sa.Column('convergence_status', sa.String(length=20), nullable=True),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.Column('iterations', sa.Integer(), nullable=True),
    sa.Column('convergence_iteration', sa.Integer(), nullable=True),
    sa.Column('confidence_interval', sa.JSON(), nullable=True),
    sa.Column('uncertainty_analysis', sa.JSON(), nullable=True),
    sa.Column('sensitivity_analysis', sa.JSON(), nullable=True),
    sa.Column('validation_score', sa.Float(), nullable=True),
    sa.Column('cross_validation_score', sa.Float(), nullable=True),
    sa.Column('test_set_performance', sa.JSON(), nullable=True),
    sa.Column('recommended_interventions', sa.JSON(), nullable=True),
    sa.Column('deployment_strategy', sa.JSON(), nullable=True),
    sa.Column('risk_assessment', sa.JSON(), nullable=True),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('hyperparameters', sa.JSON(), nullable=True),
    sa.Column('feature_importance', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['grid_cell_id'], ['climate_grid_cells.id'], ),
    sa.ForeignKeyConstraint(['operator_id'], ['operators.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_optimization_results_algorithm', 'optimization_results', ['algorithm'], unique=False)
    op.create_index('idx_optimization_results_grid_timestamp', 'optimization_results', ['grid_cell_id', 'timestamp'], unique=False)
    op.create_index('idx_optimization_results_operator', 'optimization_results', ['operator_id'], unique=False)
    op.create_index('idx_optimization_results_status', 'optimization_results', ['status'], unique=False)
    op.create_index('idx_optimization_results_type', 'optimization_results', ['optimization_type'], unique=False)
    op.create_table('satellite_data',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('grid_cell_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('pressure', sa.Float(), nullable=True),
    sa.Column('wind_speed', sa.Float(), nullable=True),
    sa.Column('wind_direction', sa.Float(), nullable=True),
    sa.Column('precipitation', sa.Float(), nullable=True),
    sa.Column('aerosol_optical_depth', sa.Float(), nullable=True),
    sa.Column('co2_concentration', sa.Float(), nullable=True),
    sa.Column('methane_concentration', sa.Float(), nullable=True),
    sa.Column('solar_irradiance', sa.Float(), nullable=True),
    sa.Column('albedo', sa.Float(), nullable=True),
    sa.Column('satellite_id', sa.String(length=50), nullable=False),
    sa.Column('instrument', sa.String(length=50), nullable=True),
    sa.Column('data_quality', sa.Float(), nullable=True),
    sa.Column('processing_level', sa.String(length=20), nullable=True),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('quality_flags', sa.JSON(), nullable=True),
    sa.Column('uncertainty', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['grid_cell_id'], ['climate_grid_cells.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_satellite_data_grid_timestamp', 'satellite_data', ['grid_cell_id', 'timestamp'], unique=False)
    op.create_index('idx_satellite_data_satellite', 'satellite_data', ['satellite_id'], unique=False)
    op.create_index('idx_satellite_data_timestamp', 'satellite_data', ['timestamp'], unique=False)
    op.create_table('intervention_impacts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('intervention_id', sa.UUID(), nullable=False),
    sa.Column('grid_cell_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('temperature_change', sa.Float(), nullable=True),
    sa.Column('humidity_change', sa.Float(), nullable=True),
    sa.Column('pressure_change', sa.Float(), nullable=True),
    sa.Column('wind_speed_change', sa.Float(), nullable=True),
    sa.Column('aerosol_optical_depth_change', sa.Float(), nullable=True),
    sa.Column('co2_concentration_change', sa.Float(), nullable=True),
    sa.Column('methane_concentration_change', sa.Float(), nullable=True),
    sa.Column('solar_irradiance_change', sa.Float(), nullable=True),
    sa.Column('albedo_change', sa.Float(), nullable=True),
    sa.Column('effectiveness_score', sa.Float(), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=True),
    sa.Column('cost_per_degree', sa.Float(), nullable=True),
    sa.Column('efficiency_ratio', sa.Float(), nullable=True),
    sa.Column('environmental_impact_score', sa.Float(), nullable=True),
    sa.Column('side_effects', sa.JSON(), nullable=True),
    sa.Column('analysis_method', sa.String(length=100), nullable=True),
    sa.Column('baseline_period', sa.JSON(), nullable=True),
    sa.Column('comparison_period', sa.JSON(), nullable=True),
    sa.Column('uncertainty_estimates', sa.JSON(), nullable=True),
    sa.Column('validation_status', sa.String(length=20), nullable=True),
    sa.Column('peer_review_status', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['grid_cell_id'], ['climate_grid_cells.id'], ),
    sa.ForeignKeyConstraint(['intervention_id'], ['interventions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_intervention_impacts_effectiveness', 'intervention_impacts', ['effectiveness_score'], unique=False)
    op.create_index('idx_intervention_impacts_grid_timestamp', 'intervention_impacts', ['grid_cell_id', 'timestamp'], unique=False)
    op.create_index('idx_intervention_impacts_intervention', 'intervention_impacts', ['intervention_id'], unique=False)
    op.create_index('idx_intervention_impacts_timestamp', 'intervention_impacts', ['timestamp'], unique=False)
    op.add_column('interventions', sa.Column('grid_cell_id', sa.UUID(), nullable=False))
    op.alter_column('interventions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('interventions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index('idx_interventions_grid_cell', 'interventions', ['grid_cell_id'], unique=False)
    op.create_foreign_key(None, 'interventions', 'climate_grid_cells', ['grid_cell_id'], ['id'])
    op.create_unique_constraint(None, 'operators', ['email'])
    op.create_unique_constraint(None, 'operators', ['api_key'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'operators', type_='unique')
    op.drop_constraint(None, 'operators', type_='unique')
    op.drop_constraint(None, 'interventions', type_='foreignkey')
    op.drop_index('idx_interventions_grid_cell', table_name='interventions')
    op.alter_column('interventions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('interventions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('interventions', 'grid_cell_id')
    op.drop_index('idx_intervention_impacts_timestamp', table_name='intervention_impacts')
    op.drop_index('idx_intervention_impacts_intervention', table_name='intervention_impacts')
    op.drop_index('idx_intervention_impacts_grid_timestamp', table_name='intervention_impacts')
    op.drop_index('idx_intervention_impacts_effectiveness', table_name='intervention_impacts')
    op.drop_table('intervention_impacts')
    op.drop_index('idx_satellite_data_timestamp', table_name='satellite_data')
    op.drop_index('idx_satellite_data_satellite', table_name='satellite_data')
    op.drop_index('idx_satellite_data_grid_timestamp', table_name='satellite_data')
    op.drop_table('satellite_data')
    op.drop_index('idx_optimization_results_type', table_name='optimization_results')
    op.drop_index('idx_optimization_results_status', table_name='optimization_results')
    op.drop_index('idx_optimization_results_operator', table_name='optimization_results')
    op.drop_index('idx_optimization_results_grid_timestamp', table_name='optimization_results')
    op.drop_index('idx_optimization_results_algorithm', table_name='optimization_results')
    op.drop_table('optimization_results')
    op.drop_index('idx_data_sources_type', table_name='data_sources')
    op.drop_index('idx_data_sources_provider', table_name='data_sources')
    op.drop_index('idx_data_sources_active', table_name='data_sources')
    op.drop_table('data_sources')
    # ### end Alembic commands ###
