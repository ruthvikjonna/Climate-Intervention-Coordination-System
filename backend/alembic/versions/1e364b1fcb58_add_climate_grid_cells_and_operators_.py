"""add climate grid cells and operators tables

Revision ID: 1e364b1fcb58
Revises: 83364386f92b
Create Date: 2025-06-27 04:30:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import uuid

# revision identifiers, used by Alembic.
revision: str = '1e364b1fcb58'
down_revision: Union[str, Sequence[str], None] = '83364386f92b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('operators',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('organization_type', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('api_key', sa.String(), nullable=False),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_operators_api_key', 'operators', ['api_key'], unique=False)
    op.create_index('idx_operators_email', 'operators', ['email'], unique=False)
    op.create_index('idx_operators_org_type', 'operators', ['organization_type'], unique=False)
    op.create_table('climate_grid_cells',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('grid_resolution', sa.String(), nullable=False),
    sa.Column('measurement_timestamp', sa.DateTime(), nullable=False),
    sa.Column('co2_ppm', sa.Float(), nullable=True),
    sa.Column('temperature_celsius', sa.Float(), nullable=True),
    sa.Column('biomass_index', sa.Float(), nullable=True),
    sa.Column('data_source', sa.String(), nullable=False),
    sa.Column('source_metadata', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_climate_grid_geospatial', 'climate_grid_cells', ['latitude', 'longitude', 'measurement_timestamp'], unique=False)
    op.create_index('idx_climate_grid_source', 'climate_grid_cells', ['data_source'], unique=False)
    op.create_index('idx_climate_grid_temporal', 'climate_grid_cells', ['measurement_timestamp'], unique=False)
    default_operator_id = str(uuid.uuid4())
    op.execute(f"""
        INSERT INTO operators (id, name, organization_type, email, api_key, permissions)
        VALUES ('{default_operator_id}', 'Default Operator', 'startup', 'default@example.com', 'default-api-key', '{{"all": true}}')
    """)
    op.drop_table('interventions')
    op.create_table('interventions',
        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, default=sa.text('gen_random_uuid()')),
        sa.Column('operator_id', postgresql.UUID(as_uuid=True), sa.ForeignKey('operators.id'), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String()),
        sa.Column('intervention_type', sa.String(), nullable=False),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('latitude', sa.Float(), nullable=False),
        sa.Column('longitude', sa.Float(), nullable=False),
        sa.Column('region_name', sa.String()),
        sa.Column('scale_amount', sa.Float(), nullable=False),
        sa.Column('scale_unit', sa.String(), nullable=False),
        sa.Column('cost_usd', sa.Float()),
        sa.Column('start_date', sa.Date()),
        sa.Column('end_date', sa.Date()),
        sa.Column('duration_months', sa.Integer()),
        sa.Column('deployment_data', postgresql.JSON(astext_type=sa.Text())),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    )
    op.create_index('idx_interventions_geospatial', 'interventions', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_interventions_operator', 'interventions', ['operator_id'], unique=False)
    op.create_index('idx_interventions_type', 'interventions', ['intervention_type'], unique=False)
    op.create_index('idx_interventions_status', 'interventions', ['status'], unique=False)
    op.create_index('idx_interventions_timeline', 'interventions', ['start_date', 'end_date'], unique=False)
    op.execute('ALTER TABLE interventions ALTER COLUMN id TYPE UUID USING (gen_random_uuid())')
    op.execute('ALTER TABLE interventions ALTER COLUMN id SET DEFAULT gen_random_uuid()')
    op.execute('ALTER TABLE interventions ALTER COLUMN created_at TYPE TIMESTAMP WITH TIME ZONE')
    op.execute('ALTER TABLE interventions ALTER COLUMN updated_at TYPE TIMESTAMP WITH TIME ZONE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_interventions_timeline', table_name='interventions')
    op.drop_index('idx_interventions_status', table_name='interventions')
    op.drop_index('idx_interventions_type', table_name='interventions')
    op.drop_index('idx_interventions_operator', table_name='interventions')
    op.drop_index('idx_interventions_geospatial', table_name='interventions')
    op.drop_constraint(None, 'interventions', type_='foreignkey')
    op.drop_column('interventions', 'deployment_data')
    op.drop_column('interventions', 'duration_months')
    op.drop_column('interventions', 'end_date')
    op.drop_column('interventions', 'start_date')
    op.drop_column('interventions', 'cost_usd')
    op.drop_column('interventions', 'scale_unit')
    op.drop_column('interventions', 'scale_amount')
    op.drop_column('interventions', 'region_name')
    op.drop_column('interventions', 'longitude')
    op.drop_column('interventions', 'latitude')
    op.drop_column('interventions', 'operator_id')
    op.drop_index('idx_climate_grid_temporal', table_name='climate_grid_cells')
    op.drop_index('idx_climate_grid_source', table_name='climate_grid_cells')
    op.drop_index('idx_climate_grid_geospatial', table_name='climate_grid_cells')
    op.drop_table('climate_grid_cells')
    op.drop_index('idx_operators_org_type', table_name='operators')
    op.drop_index('idx_operators_email', table_name='operators')
    op.drop_index('idx_operators_api_key', table_name='operators')
    op.drop_table('operators')
    # ### end Alembic commands ###
